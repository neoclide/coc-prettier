{
  "name": "coc-prettier",
  "version": "9.3.2",
  "description": "prettier extension for coc.nvim",
  "main": "lib/index.js",
  "publisher": "chemzqm",
  "keywords": [
    "coc.nvim",
    "prettier"
  ],
  "engines": {
    "coc": ">= 0.0.80"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/neoclide/coc-prettier.git"
  },
  "bugs": {
    "url": "https://github.com/neoclide/coc-prettier/issues"
  },
  "scripts": {
    "prepare": "node esbuild.js"
  },
  "activationEvents": [
    "*"
  ],
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "Prettier - Code formatter configuration",
      "properties": {
        "prettier.formatterPriority": {
          "type": "number",
          "default": 1,
          "description": "Priority of format provider, default to 1 that higher than other languageserver formatter, change to -1 to make it lower priority."
        },
        "prettier.disableLanguages": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "A list of languages IDs to disable this extension on",
          "scope": "window"
        },
        "prettier.documentSelectors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "markdownDescription": "A list of [glob patterns](https://code.visualstudio.com/api/references/vscode-api#GlobPattern) to register Prettier formatter",
          "scope": "window"
        },
        "prettier.enable": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Controls whether prettier is enabled or not.",
          "scope": "resource"
        },
        "prettier.requireConfig": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Require a prettier configuration file to format. See [documentation for valid configuration files](https://prettier.io/docs/en/configuration.html).\n\n> _Note, untitled files will still be formatted using the coc-prettier settings even when this setting is set._",
          "scope": "resource"
        },
        "prettier.resolveGlobalModules": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "When enabled, this extension will attempt to use global npm or yarn modules if local modules cannot be resolved.\n> _This setting can have a negative performance impact, particularly on Windows when you have attached network drives. Only enable this if you must use global modules._",
          "scope": "resource"
        },
        "prettier.withNodeModules": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "If true, this extension will process files in node_modules",
          "scope": "resource"
        },
        "prettier.packageManager": {
          "scope": "resource",
          "type": "string",
          "enum": [
            "npm",
            "yarn",
            "pnpm"
          ],
          "default": "npm",
          "deprecationMessage": "Package manager is now automatically detected by coc-prettier. This setting is no longer used.",
          "markdownDescription": "The package manager you use to install node modules."
        },
        "prettier.useEditorConfig": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether or not to take `.editorconfig` into account when parsing configuration. See the [prettier.resolveConfig](https://prettier.io/docs/en/api.html) docs for details.",
          "scope": "resource"
        },
        "prettier.prettierPath": {
          "type": "string",
          "markdownDescription": "Path to the prettier module",
          "scope": "resource"
        },
        "prettier.configPath": {
          "type": "string",
          "markdownDescription": "Path to the prettier configuration file",
          "scope": "resource"
        },
        "prettier.enableDebugLogs": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Enable debug logs for troubleshooting.",
          "scope": "resource"
        },
        "prettier.onlyUseLocalVersion": {
          "type": "boolean",
          "default": false,
          "description": "Only use the version of prettier installed by the client, ignoring the version bundled with coc-prettier",
          "scope": "resource"
        },
        "prettier.statusItemText": {
          "type": "string",
          "default": "Prettier",
          "description": "Text shown in status item.",
          "scope": "resource"
        },
        "prettier.ignorePath": {
          "type": "string",
          "default": ".prettierignore",
          "description": "Path to a .prettierignore or similar file",
          "scope": "resource"
        },
        "prettier.printWidth": {
          "type": "integer",
          "default": 80,
          "description": "Fit code within this line limit",
          "scope": "resource"
        },
        "prettier.tabWidth": {
          "type": "integer",
          "default": 2,
          "description": "Number of spaces it should use per tab",
          "scope": "resource"
        },
        "prettier.singleQuote": {
          "type": "boolean",
          "default": false,
          "description": "If true, will use single instead of double quotes",
          "scope": "resource"
        },
        "prettier.trailingComma": {
          "type": "string",
          "enum": [
            "none",
            "es5",
            "all"
          ],
          "default": "all",
          "description": "Controls the printing of trailing commas wherever possible.\n Valid options:\n    'none' - No trailing commas\n    'es5' - Trailing commas where valid in ES5 (objects, arrays, etc)\n    'all' - Trailing commas wherever possible (function arguments)",
          "scope": "resource"
        },
        "prettier.bracketSpacing": {
          "type": "boolean",
          "default": true,
          "description": "Controls the printing of spaces inside object literals",
          "scope": "resource"
        },
        "prettier.jsxSingleQuote": {
          "type": "boolean",
          "default": false,
          "description": "Use single quotes instead of double quotes in JSX"
        },
        "prettier.bracketSameLine": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "If true, puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line",
          "scope": "resource"
        },
        "prettier.htmlWhitespaceSensitivity": {
          "type": "string",
          "enum": [
            "css",
            "strict",
            "ignore"
          ],
          "default": "css",
          "description": "Specify the global whitespace sensitivity for HTML files.\n Valid options: \n'css' - Respect the default value of CSS display property. \n'strict' - Whitespaces are considered sensitive. \n'ignore' - Whitespaces are considered insensitive."
        },
        "prettier.vueIndentScriptAndStyle": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Whether or not to indent the code inside `<script>` and `<style>` tags in Vue files. Some people (like the creator of Vue) donâ€™t indent to save an indentation level, but this might break code folding in your editor.",
          "scope": "resource"
        },
        "prettier.endOfLine": {
          "type": "string",
          "enum": [
            "auto",
            "lf",
            "crlf",
            "cr"
          ],
          "default": "lf",
          "description": "Specify the end of line used by prettier"
        },
        "prettier.semi": {
          "type": "boolean",
          "default": true,
          "description": "Whether to add a semicolon at the end of every line",
          "scope": "resource"
        },
        "prettier.requirePragma": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file. This is very useful when gradually transitioning large, unformatted codebases to prettier.",
          "scope": "resource"
        },
        "prettier.insertPragma": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Prettier can insert a special @format marker at the top of files specifying that the file has been formatted with prettier. This works well when used in tandem with the `--require-pragma` option. If there is already a docblock at the top of the file then this option will add a newline to it with the @format marker.",
          "scope": "resource"
        },
        "prettier.useTabs": {
          "type": "boolean",
          "default": false,
          "description": "Indent lines with tabs",
          "scope": "resource"
        },
        "prettier.proseWrap": {
          "type": "string",
          "enum": [
            "preserve",
            "always",
            "never"
          ],
          "default": "preserve",
          "description": "(Markdown) wrap prose over multiple lines"
        },
        "prettier.arrowParens": {
          "type": "string",
          "enum": [
            "avoid",
            "always"
          ],
          "default": "always",
          "description": "Include parentheses around a sole arrow function parameter",
          "scope": "resource"
        },
        "prettier.quoteProps": {
          "type": "string",
          "enum": [
            "as-needed",
            "consistent",
            "preserve"
          ],
          "default": "as-needed",
          "markdownDescription": "Change when properties in objects are quoted",
          "scope": "resource"
        },
        "prettier.embeddedLanguageFormatting": {
          "type": "string",
          "enum": [
            "auto",
            "off"
          ],
          "default": "auto",
          "markdownDescription": "Control whether Prettier formats quoted code embedded in the file.",
          "scope": "resource"
        }
      }
    },
    "jsonValidation": [
      {
        "fileMatch": ".prettierrc",
        "url": "http://json.schemastore.org/prettierrc"
      },
      {
        "fileMatch": ".prettierrc.json",
        "url": "http://json.schemastore.org/prettierrc"
      },
      {
        "fileMatch": "package.json",
        "url": "./package-json-schema.json"
      }
    ],
    "commands": [
      {
        "command": "prettier.createConfigFile",
        "title": "Prettier: Create Configuration File"
      },
      {
        "command": "prettier.forceFormatDocument",
        "title": "Format Document (Forced)"
      }
    ]
  },
  "author": "chemzqm@gmail.com",
  "license": "MIT",
  "devDependencies": {
    "@chemzqm/tsconfig": "^0.0.3",
    "@types/node": "12.12.0",
    "@types/semver": "^7.3.9",
    "coc.nvim": "^0.0.81-next.24",
    "esbuild": "^0.14.38",
    "find-up": "^5.0.0",
    "ignore": "^5.2.0",
    "resolve": "^1.22.0",
    "rimraf": "^3.0.2",
    "semver": "^7.3.7",
    "typescript": "^4.6.4"
  },
  "dependencies": {
    "prettier": "^3.1.1"
  }
}
